name: Test with firmware

on: [push]

jobs:
  setup:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the repository
      - name: Checkout Repository
        uses: actions/checkout@v2

      - name: Enable Debug Logging
        run: |
          echo "Enabling debug logging"
          export ACTIONS_RUNNER_DEBUG=true

      - name: Set up environment
        run: |
          # Define constants
          SONICFIRMWARE_URL=git@github.com:usepat/FW-sonic-firmware.git
          SONICFIRMWARE_REPO=$PWD/FW-sonic-firmware  # Use absolute path

          # Set up SSH key
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY_BASE64 }}" | base64 -d > ~/.ssh/id_ed25519
          chmod 700 ~/.ssh
          chmod 600 ~/.ssh/id_ed25519
          
          # Generate public key
          ssh-keygen -y -f ~/.ssh/id_ed25519 > ~/.ssh/id_ed25519.pub
          ssh-keygen -l -f ~/.ssh/id_ed25519.pub

          # Clone the repository
          GIT_SSH_COMMAND='ssh -i ~/.ssh/id_ed25519 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no' git clone $SONICFIRMWARE_URL
          
          # Show files in the working directory
          echo "Listing root directory after clone:"
          ls -la

          # Check if repo is cloned successfully
          if [ ! -d "$SONICFIRMWARE_REPO" ]; then
              echo "Repository directory not found!"
              exit 1
          fi

          cd $SONICFIRMWARE_REPO
          echo "Now in $(pwd)"
          ls -la
          git pull
          git submodule update --init --recursive --remote
          git fetch --all --tags
          latest_tag=$(git describe --tags `git rev-list --tags --max-count=1`)
          git checkout $latest_tag
          
          

      - name: Install CMake and Doxygen
        run: |
          sudo apt-get update
          sudo apt-get install -y cmake
          sudo apt-get install -y doxygen graphviz mscgen dia
          sudo apt-get install -y python3-tk  # Install tkinter

      - name: Create Simulation
        run: |
          SONICFIRMWARE_REPO=$PWD/FW-sonic-firmware  # Use absolute path
          echo "Inside Create Simulation"
          echo "Current working directory: $(pwd)"
          echo "Contents before build:"
          
          cd $SONICFIRMWARE_REPO
          echo "Now in $(pwd)"
          
          mkdir build && cd build
          echo "Running CMake"
          cmake -DCMAKE_BUILD_TYPE=Debug ..
          cmake --build . --target cli_simulation_mvp

      - name: Run Robot Tests
        run: |
          python -m venv venv
          source venv/bin/activate
          python -m pip install --upgrade pip
          pip install robotframework

          echo "Inside Run Robot Tests"
          echo "Current working directory: $(pwd)"
          SIMULATION_EXE_PATH=$PWD/FW-sonic-firmware/build/test/cli/cli_simulation_mvp/cli_simulation_mvp  # Use absolute path
          
          ls -la $SIMULATION_EXE_PATH

          pip install -r requirements.txt
          pip install -e .

          echo "Running Robot Tests"
          robot -v TARGET:simulation -v SIMULATION_EXE_PATH:$SIMULATION_EXE_PATH tests_robot/test_cases/test_sonicpackage.robot

      # Step 5: Upload test results (optional)
      - name: Upload Test Results
        uses: actions/upload-artifact@v2
        with:
          name: robot-results
          path: output.xml
