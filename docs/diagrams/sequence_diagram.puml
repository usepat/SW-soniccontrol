@startuml

actor User

User -> ConnectionWindow: selects port
ConnectionWindow -> DeviceWindow: property binding
DeviceWindow -> ConnectionModel: set_port(port: str)
ConnectionModel --> ConnectionWindow: updates view
User -> ConnectionWindow: presses "Connect"
ConnectionWindow -> DeviceWindow: event_generate(CONNECTION_ATTEMPT): None
DeviceWindow -> ConnectionModel: get_port(): str
ConnectionModel --> DeviceWindow: port: str
DeviceWindow -> CommunicationBuilder: generate_connection(endpoint: str): Communicator
CommunicationBuilder -> Communicator: builds
Communicator --> CommunicationBuilder
CommunicationBuilder --> DeviceWindow: communicator: Communicator
DeviceWindow -> SonicDeviceBuilder: build_amp(communicator: Communicator)
SonicDeviceBuilder --> ProtocolBuilder: generate_default_protocol: CommandLookUpTable
ProtocolBuilder --> SonicDeviceBuilder: commands: CommandLookUpTable
SonicDeviceBuilder -> Communicator: send ?protocol
Communicator --> SonicDeviceBuilder: get protocol_version, device_type, ...
SonicDeviceBuilder --> ProtocolBuilder: generate_protocol(protocol_version, device_type, ...): CommandLookUpTable
ProtocolBuilder --> SonicDeviceBuilder: commands: CommandLookUpTable
SonicDeviceBuilder --> DeviceWindow: returns SonicDevice
@enduml

