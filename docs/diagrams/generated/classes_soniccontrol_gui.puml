@startuml classes_soniccontrol_gui
set namespaceSeparator none
class "ATConfig" as soniccontrol_gui.views.configuration.transducer_configs.ATConfig {
}
class "ATConfigFrame" as soniccontrol_gui.views.configuration.transducer_configs.ATConfigFrame {
  value
}
class "ATConfigFrameView" as soniccontrol_gui.views.configuration.transducer_configs.ATConfigFrameView {
  atf
  atk
  aton
  att
}
class "ATConfigSchema" as soniccontrol_gui.views.configuration.transducer_configs.ATConfigSchema {
}
class "Animator" as soniccontrol_gui.utils.animator.Animator {
  is_animation_running
  run(num_repeats: int, frame_rate: Optional[float]) -> None
  run_as_load_animation_for_task(task: asyncio.Task) -> None
  stop() -> None
}
class "ButtonStyle" as soniccontrol_gui.widgets.pushbutton.ButtonStyle {
  name
}
class "Capture" as soniccontrol_gui.state_fetching.capture.Capture {
  data_provider
  is_capturing
  end_capture()
  on_update(status: Status)
  start_capture()
}
class "Card" as soniccontrol_gui.widgets.card.Card {
  bind_deep(widget: ttk.tk.Widget, event: str, func: Callable[[Any], Any]) -> None
  configure_command(command: Callable[..., Any])
  mark_card(widget: ttk.tk.Widget, style: str) -> None
  mark_clicked(event: str | None) -> None
  mark_default(event: str | None) -> None
  mark_hover(event: str | None) -> None
}
class "Config" as soniccontrol_gui.views.configuration.transducer_configs.Config {
}
class "ConfigSchema" as soniccontrol_gui.views.configuration.transducer_configs.ConfigSchema {
}
class "Configuration" as soniccontrol_gui.views.configuration.configuration.Configuration {
  current_transducer_config
  on_execution_state_changed(e: PropertyChangeEvent) -> None
}
class "ConfigurationView" as soniccontrol_gui.views.configuration.configuration.ConfigurationView {
  atconfigs
  image
  init_script_path
  selected_transducer_config
  tab_title
  transducer_config_name
  set_add_transducer_config_command(command: Callable[[], None]) -> None
  set_delete_transducer_config_command(command: Callable[[], None]) -> None
  set_save_config_command(command: Callable[[], None]) -> None
  set_submit_config_button_enabled(enabled: bool) -> None
  set_submit_config_button_label(text: str) -> None
  set_submit_transducer_config_command(command: Callable[[], None]) -> None
  set_transducer_config_menu_items(items: Iterable[str]) -> None
  set_transducer_config_selected_command(command: Callable[[], None]) -> None
}
class "CsvWriter" as soniccontrol_gui.state_fetching.csv_writer.CsvWriter {
  close_file()
  open_file(filename: str, header: List[str])
  write_entry(data: dict)
}
class "DataProvider" as soniccontrol_gui.state_fetching.data_provider.DataProvider {
  data
  add_row(row: dict)
}
class "DebounceJob" as soniccontrol_gui.utils.debounce_job.DebounceJob {
}
class "DeviceLogFilter" as soniccontrol_gui.state_fetching.logger.DeviceLogFilter {
  filter(record) -> bool
}
class "Document" as soniccontrol_gui.widgets.document.Document {
}
class "DocumentView" as soniccontrol_gui.widgets.document.DocumentView {
}
class "DotAnimationSequence" as soniccontrol_gui.utils.animator.DotAnimationSequence {
}
class "Editor" as soniccontrol_gui.views.control.editor.Editor {
  on_execution_state_changed(e: PropertyChangeEvent) -> None
}
class "EditorView" as soniccontrol_gui.views.control.editor.EditorView {
  current_task
  editor_enabled
  editor_text
  editor_text_view
  image
  single_step_button
  start_pause_continue_button
  stop_button
  tab_title
  add_menu_command(label: str, command: Callable[[], None]) -> None
  highlight_line(line_idx: Optional[int]) -> None
  set_scripting_guide_button_command(command: Callable[[], None]) -> None
}
class "Entry" as soniccontrol_gui.widgets.entry.Entry {
  placeholder
}
class "FileBrowseButtonView" as soniccontrol_gui.widgets.file_browse_button.FileBrowseButtonView {
  path
}
class "Flashing" as soniccontrol_gui.views.configuration.flashing.Flashing {
}
class "FlashingView" as soniccontrol_gui.views.configuration.flashing.FlashingView {
  image
  tab_title
}
class "FloatFieldView" as soniccontrol_gui.widgets.procedure_widget.FloatFieldView {
  entry : Entry
  field_name
  label : Label
  value
}
class "Home" as soniccontrol_gui.views.home.Home {
  on_execution_state_changed(e: PropertyChangeEvent) -> None
}
class "HomeView" as soniccontrol_gui.views.home.HomeView {
  freq
  gain
  image
  signal
  tab_title
  set_device_type(text: str) -> None
  set_disconnect_button_command(command: Callable[[], None]) -> None
  set_disconnect_button_enabled(enabled: bool) -> None
  set_firmware_version(text: str) -> None
  set_protocol_version(text: str) -> None
  set_send_button_command(command: Callable[[], None]) -> None
  set_send_button_enabled(enabled: bool) -> None
}
class "HorizontalScrolledFrame" as soniccontrol_gui.widgets.horizontal_scrolled_frame.HorizontalScrolledFrame {
  autohide : bool
  container : Frame
  hscroll : Scrollbar
  winsys
  autohide_scrollbar()
  disable_scrolling()
  enable_scrolling()
  hide_scrollbars()
  show_scrollbars()
  xview()
  xview_moveto(fraction: float)
  xview_scroll(number: int, what: str)
}
class "Image" as soniccontrol_gui.widgets.document.Image {
}
class "ImageLoader" as soniccontrol_gui.utils.image_loader.ImageLoader {
  images : dict[str, ttk.ImageTk.PhotoImage]
  generate_image_key(image_name: str, sizing: tuple[int, int]) -> str
  initialize(master: ttk.Window) -> type[ImageLoader]
  load_image_resource(image_name: str, sizing: tuple[int, int]) -> ttk.ImageTk.PhotoImage
}
class "Info" as soniccontrol_gui.views.info.Info {
}
class "InfoView" as soniccontrol_gui.views.info.InfoView {
  image
  tab_title
  publish() -> None
  set_large_width_layout() -> None
  set_small_width_layout() -> None
}
class "IntFieldView" as soniccontrol_gui.widgets.procedure_widget.IntFieldView {
  entry : Entry
  field_name
  label : Label
  value
}
class "InterpreterState" as soniccontrol_gui.views.control.editor.InterpreterState {
  name
}
class "LogStorage" as soniccontrol_gui.state_fetching.logger.LogStorage {
  logs
  create_log_handler() -> LogStorageHandler
}
class "LogStorageHandler" as soniccontrol_gui.state_fetching.logger.LogStorage.LogStorageHandler {
  emit(record: logging.LogRecord) -> None
}
class "Logging" as soniccontrol_gui.views.control.logging.Logging {
}
class "LoggingTab" as soniccontrol_gui.views.control.logging.LoggingTab {
}
class "LoggingTabView" as soniccontrol_gui.views.control.logging.LoggingTabView {
  image
  tab_title
  append_text_line(text: str)
}
class "LoggingView" as soniccontrol_gui.views.control.logging.LoggingView {
  image
  tab_title
  add_tabs(tabs: Dict[str, View]) -> None
}
class "MessageFetcher" as soniccontrol_gui.state_fetching.message_fetcher.MessageFetcher {
  MESSAGE_RECEIVED_EVENT : str
  is_running
  run()
  stop()
}
class "Meta" as soniccontrol_gui.views.configuration.transducer_configs.ATConfigSchema.Meta {
  register_as_scheme : bool
  target
}
class "Meta" as soniccontrol_gui.views.configuration.transducer_configs.TransducerConfigSchema.Meta {
  register_as_scheme : bool
  target
}
class "Meta" as soniccontrol_gui.views.configuration.transducer_configs.ConfigSchema.Meta {
  register_as_scheme : bool
  target
}
class "NotDeviceLogFilter" as soniccontrol_gui.state_fetching.logger.NotDeviceLogFilter {
  filter(record) -> bool
}
class "Notebook" as soniccontrol_gui.widgets.notebook.Notebook {
  add_tab(tab: TabView, index: int | None) -> None
  add_tabs(tabs: List[Union[TabView, Tuple[int, TabView]]], keep_tabs: bool, show_titles: bool, show_images: bool) -> None
  configure_tabs(show_titles: bool, show_images: bool) -> None
}
class "ObservableList" as soniccontrol_gui.utils.observable_list.ObservableList {
  EVENT_ITEM_ADDED : Literal['Item Added']
  EVENT_ITEM_DELETED : Literal['Item Deleted']
  EVENT_LIST_CLEARED : Literal['List Cleared']
  append(item)
  clear()
  remove(item)
  remove_at(index: int) -> None
}
class "Plot" as soniccontrol_gui.utils.plotlib.plot.Plot {
  lineDefaultStyle
  lines
  plot
  add_axis(axis_id: str, ylabel: str) -> None
  add_line(dataAttrName: str, axis_id: str) -> None
  tight_layout()
  toggle_line(dataAttrName: str, isVisible: bool)
  update_data(data: pd.DataFrame)
  update_plot()
}
class "PlotBuilder" as soniccontrol_gui.utils.plotlib.plot_builder.PlotBuilder {
  create_spectralplot_uip(subplot: matplotlib.axes.Axes) -> Plot
  create_timeplot_fuip(subplot: matplotlib.axes.Axes) -> Plot
}
class "ProcControlling" as soniccontrol_gui.views.control.proc_controlling.ProcControlling {
  on_procedure_running(e: Event)
  on_procedure_stopped(_e: Event)
}
class "ProcControllingView" as soniccontrol_gui.views.control.proc_controlling.ProcControllingView {
  image
  procedure_frame
  selected_procedure
  tab_title
  set_procedure_combobox_items(items: Iterable[str]) -> None
  set_procedure_selected_command(command: Callable[[], None]) -> None
  set_running_proc_label(text: str) -> None
  set_start_button_command(command: Callable[[], None]) -> None
  set_start_button_enabled(enabled: bool) -> None
  set_stop_button_command(command: Callable[[], None]) -> None
  set_stop_button_enabled(enabled: bool) -> None
}
class "ProcedureWidget" as soniccontrol_gui.widgets.procedure_widget.ProcedureWidget {
  get_args() -> Optional[Any]
}
class "ProcedureWidgetView" as soniccontrol_gui.widgets.procedure_widget.ProcedureWidgetView {
  field_slot
  hide() -> None
  set_error_message(error_msg: Optional[str]) -> None
  set_procedure_name(procedure_name: str) -> None
  show() -> None
}
class "PushButtonView" as soniccontrol_gui.widgets.pushbutton.PushButtonView {
  configure(label: str, style: ButtonStyle, image: Optional[Tuple[Path, Tuple[int, int]]], command: Optional[Callable[[], None]], enabled: Optional[bool])
}
class "ResponsiveLabel" as soniccontrol_gui.widgets.responsive_label.ResponsiveLabel {
  adapt(event: ttk.tk.Event) -> None
  grow_bigger(event: ttk.tk.Event) -> None
}
class "ScriptFile" as soniccontrol_gui.views.control.editor.ScriptFile {
  load_script(filepath: Optional[str])
  save_script(filepath: Optional[str])
}
class "ScriptingGuide" as soniccontrol_gui.views.control.scriptingguide.ScriptingGuide {
  insert_text(text: str) -> None
}
class "ScriptingGuideCardDataDict" as soniccontrol_gui.utils.types.ScriptingGuideCardDataDict {
  arguments : str
  description : str
  example : str
  keyword : str
}
class "SerialMonitor" as soniccontrol_gui.views.control.serialmonitor.SerialMonitor {
  on_execution_state_changed(e: PropertyChangeEvent) -> None
}
class "SerialMonitorView" as soniccontrol_gui.views.control.serialmonitor.SerialMonitorView {
  command_line_input
  image
  tab_title
  add_text_line(text: str)
  bind_command_line_input_on_down_pressed(command: Callable[[], None])
  bind_command_line_input_on_return_pressed(command: Callable[[], None])
  bind_command_line_input_on_up_pressed(command: Callable[[], None])
  clear()
  set_command_line_input_enabled(enabled: bool) -> None
  set_loading_text(text: str) -> None
  set_read_button_command(command: Callable[[], None])
  set_send_command_button_command(command: Callable[[], None])
  set_send_command_button_enabled(enabled: bool) -> None
}
class "SingletonMeta" as soniccontrol_gui.utils.image_loader.SingletonMeta {
}
class "Spinbox" as soniccontrol_gui.widgets.spinbox.Spinbox {
  placeholder
  activate_placeholder() -> None
}
class "TabView" as soniccontrol_gui.view.TabView {
  image
  tab_title
}
class "Text" as soniccontrol_gui.widgets.document.Text {
}
class "TimeFieldView" as soniccontrol_gui.widgets.procedure_widget.TimeFieldView {
  field_name
  value
}
class "TransducerConfig" as soniccontrol_gui.views.configuration.transducer_configs.TransducerConfig {
}
class "TransducerConfigSchema" as soniccontrol_gui.views.configuration.transducer_configs.TransducerConfigSchema {
  init_script_path : Method
  deserialize_path(value)
  serialize_path(obj) -> str | None
}
class "UIComponent" as soniccontrol_gui.ui_component.UIComponent {
  logger
  parent
  view
}
class "Updater" as soniccontrol_gui.state_fetching.updater.Updater {
  running
  task
  execute() -> None
  stop_execution() -> None
}
class "View" as soniccontrol_gui.view.View {
  parent
}
class "_Color" as soniccontrol_gui.constants._Color {
  DARK_GREEN : Literal['green']
  STATUS_LIGHT_GREY : Literal['#f8f5f0']
  STATUS_MEDIUM_GREY : Literal['#c3c0ba']
}
class "_Events" as soniccontrol_gui.constants._Events {
  AUTO_MODE_EVENT : Literal['<<AutoMode>>']
  CLICKED_EVENT : Literal['<Button-1>']
  CONNECTED_EVENT : Literal['<<Connected>>']
  CONNECTION_ATTEMPT_EVENT : Literal['<<ConnectionAttempt>>']
  DISCONNECTED_EVENT : Literal['<<Disconnected>>']
  FIRMWARE_FLASH_EVENT : Literal['<<FirmwareFlash>>']
  MANUAL_MODE_EVENT : Literal['<<ManualMode>>']
  PROCEDURE_RUNNING : Literal['<<ProcedureRunning>>']
  PROCEDURE_STOPPED : str
  PROPERTY_CHANGE_EVENT : str
  RESIZING_EVENT : Literal['<Configure>']
  SAVE_CONFIG : Literal['<<SaveConfig>>']
  SCRIPT_PAUSE_EVENT : Literal['<<ScriptPause>>']
  SCRIPT_START_EVENT : Literal['<<ScriptStarted>>']
  SCRIPT_STOP_EVENT : Literal['<<ScriptStopped>>']
  SIGNAL_OFF : Literal['<<SignalOff>>']
  SIGNAL_ON : Literal['<<SignalOn>>']
  SONICMEASURE_START_EVENT : Literal['<<SonicMeasureStarted>>']
  SONICMEASURE_STOP_EVENT : Literal['<<SonicMeasureStopped>>']
  STATUS_UPDATE_EVENT : Literal['<<StatusUpdate>>']
}
class "_Files" as soniccontrol_gui.constants._Files {
  DATA_DIR
  LOG_DIR
  SONICCONTROL_LOG
  TRANSDUCDER_CONFIG_JSON
}
class "_Fonts" as soniccontrol_gui.constants._Fonts {
  HEADING_SIZE : Final[int]
  QTYPE_OT : Literal['QTypeOT']
  QTYPE_OT_CONDLIGHT : Literal['QTypeOT-CondLight']
  SMALL_HEADING_SIZE : Final[int]
  TEXT_SIZE : Final[int]
}
class "_Images" as soniccontrol_gui.resources._Images {
  BACK_ICON_BLACK : str
  BACK_ICON_WHITE : str
  CONNECTION_ICON_BLACK : str
  CONNECTION_ICON_WHITE : str
  CONSOLE_ICON_BLACK : str
  END_ICON_BLACK : str
  END_ICON_WHITE : str
  FORWARDS_ICON_BLACK : str
  FORWARDS_ICON_WHITE : str
  HOME_CONTROL_PANEL : str
  HOME_ICON_BLACK : str
  HOME_SIGNAL_CONTROL_PANEL : str
  INFO_ICON_BLACK : str
  INFO_ICON_WHITE : str
  LED_ICON_GREEN : str
  LED_ICON_RED : str
  LIGHTNING_ICON_WHITE : str
  LINECHART_ICON_BLACK : str
  LOGO : str
  MENUE_ICON_BLACK : str
  MENUE_ICON_WHITE : str
  PAUSE_ICON_BLACK : str
  PAUSE_ICON_WHITE : str
  PLAY_ICON_BLACK : str
  PLAY_ICON_WHITE : str
  REFRESH_ICON_BLACK : str
  REFRESH_ICON_GREY : str
  REFRESH_ICON_WHITE : str
  SAVE_ICON_BLACK : str
  SAVE_ICON_WHITE : str
  SCRIPT_ICON_BLACK : str
  SETTINGS_ICON_BLACK : str
  STATUS_ICON_BLACK : str
}
class "_Resources" as soniccontrol_gui.resources._Resources {
  FONTS
  HELPTEXT_INTERNAL_COMMANDS : Path
  HELPTEXT_SONIC_V1 : Path
  LOGGING_CONFIG : Path
  PICTURES
  RESOURCES
  TEXTS
}
class "_Sizes" as soniccontrol_gui.constants._Sizes {
  BUTTON_ICON_SIZE : Final[tuple[int, int]]
  DONT_EXPAND : Final[int]
  EXPAND : Final[int]
  LARGE_BUTTON_ICON_SIZE : Final[tuple[int, int]]
  LARGE_PADDING : Final[int]
  LARGE_PART_PADDING : Final[int]
  MEDIUM_PADDING : Final[int]
  METERSIZE : Final[int]
  SIDE_PADDING : Final[int]
  SMALL_PADDING : Final[int]
  SMALL_PART_PADDING : Final[int]
  TAB_ICON_SIZE : Final[tuple[int, int]]
}
class "_Style" as soniccontrol_gui.constants._Style {
  DARK_OUTLINE_TOOLBUTTON : Literal['dark-outline-toolbutton']
  DARK_SQUARE_TOGGLE : Literal['dark-square-toggle']
  INVERSE_DANGER : Literal['inverse-danger']
  INVERSE_LIGHT : Literal['inverse-light']
  INVERSE_PRIMARY : Literal['inverse-primary']
  INVERSE_SECONDARY : Literal['inverse-secondary']
  INVERSE_SUCCESS : Literal['inverse-success']
  SECONDARY_OUTLINE : Literal['secondary-outline']
}
class "_TkinterConstants" as soniccontrol_gui.constants._TkinterConstants {
  COMPOUND : Literal['compound']
  DELETE_WINDOW : Literal['WM_DELETE_WINDOW']
  IMAGE : Literal['image']
  READ : Literal['read']
  WRITE : Literal['write']
}
class "_UIStringsEN" as soniccontrol_gui.constants._UIStringsEN {
  APP_LOGS_LABEL : Final[str]
  ATF : Final[str]
  ATF1 : Final[str]
  ATF2 : Final[str]
  ATF3 : Final[str]
  ATK : Final[str]
  ATK1 : Final[str]
  ATK2 : Final[str]
  ATK3 : Final[str]
  ATT : Final[str]
  ATT1 : Final[str]
  AUTO_LABEL : Final[str]
  AUTO_READ_LABEL : Final[str]
  BACK_LABEL : Final[str]
  CATCH_LABEL : Final[str]
  CATCH_MODE_LABEL : Final[str]
  COEFFICIENT : Final[str]
  COMMAND_SET : Final[str]
  COMPANY_NAME : Final[str]
  CONNECTED_LABEL : Final[str]
  CONNECTION_LABEL : Final[str]
  CONNECT_LABEL : Final[str]
  CONNECT_TO_SIMULATION_LABEL : Final[str]
  CONTROL_LABEL : Final[str]
  COULD_NOT_CONNECT_MESSAGE : Final[str]
  CSV_TAB_TITLE : Final[str]
  DATA_VISUALIZER : Final[str]
  DEGREE_CELSIUS : Final[str]
  DELETE_LABEL : Final[str]
  DEVICE_DISCONNECTED_MSG : Final[str]
  DEVICE_DISCONNECTED_TITLE : Final[str]
  DEVICE_LOGS_LABEL : Final[str]
  DEVICE_TYPE_LABEL : Final[str]
  DISCONNECT_LABEL : Final[str]
  END : Final[str]
  END_CAPTURE : Final[str]
  END_LABEL : Final[str]
  FIRMWARE_LABEL : Final[str]
  FIRMWARE_VERSION_LABEL : Final[str]
  FLASHER_LABEL : Final[str]
  FLASH_SETTINGS_LABEL : Final[str]
  FREQUENCY : Final[str]
  FREQ_PLACEHOLDER : Final[str]
  GAIN : Final[str]
  GAIN_PLACEHOLDER : Final[str]
  GUIDE_LABEL : Final[str]
  HOME_CONTROL_LABEL : Final[str]
  HOME_HELP_AUTO : Final[str]
  HOME_HELP_CATCH : Final[str]
  HOME_HELP_CONTROL_PANEL : Final[str]
  HOME_HELP_FREQUENCY : Final[str]
  HOME_HELP_GAIN : Final[str]
  HOME_HELP_INTRODUCTION : Final[str]
  HOME_HELP_OFF : Final[str]
  HOME_HELP_ON : Final[str]
  HOME_HELP_OUTPUT : Final[str]
  HOME_HELP_SET_VALUES : Final[str]
  HOME_HELP_SIGNAL_CONTROL_PANEL : Final[str]
  HOME_HELP_WIPE : Final[str]
  HOME_LABEL : Final[str]
  IDLE_TITLE : Final[str]
  INFO_LABEL : Final[str]
  INPUT_LABEL : Final[str]
  IRMS : Final[str]
  KHZ : Final[str]
  LIVE_PLOT : Final[str]
  LOAD_LABEL : Final[str]
  LOGS_LABEL : Final[str]
  NEW_LABEL : Final[str]
  NOT_CONNECTED : Final[str]
  NOT_LABEL : Final[str]
  OFF_DURATION : Final[str]
  OFF_LABEL : Final[str]
  ON_DURATION : Final[str]
  ON_LABEL : Final[str]
  OUTPUT_LABEL : Final[str]
  PAUSE_LABEL : Final[str]
  PERCENT : Final[str]
  PHASE : Final[str]
  PLEASE_CONNECT_LABEL : Final[str]
  PROCEDURES_LABEL : Final[str]
  PROC_NOT_RUNNING : Final[str]
  PROC_RUNNING : Final[str]
  PROTOCOL_VERSION_LABEL : Final[str]
  REFRESH : Final[str]
  RESTART : Final[str]
  RESUME_LABEL : Final[str]
  SAVE_AS_LABEL : Final[str]
  SAVE_LABEL : Final[str]
  SAVE_PLOT_LABEL : Final[str]
  SCRIPTING_LABEL : Final[str]
  SCRIPT_EDITOR_LABEL : Final[str]
  SEARCH : Final[str]
  SEND_LABEL : Final[str]
  SERIAL_MONITOR_LABEL : Final[str]
  SETTINGS_LABEL : Final[str]
  SET_FREQUENCY_LABEL : Final[str]
  SET_GAIN_LABEL : Final[str]
  SET_VALUES_LABEL : Final[str]
  SIGNAL_LABEL : Final[str]
  SIGNAL_OFF : Final[str]
  SIGNAL_ON : Final[str]
  SINGLE_STEP_LABEL : Final[str]
  SONICAMP_SETTINGS_LABEL : Final[str]
  SONICCONTROL_SETTINGS_LABEL : Final[str]
  SONIC_LABEL : Final[str]
  SONIC_MEASURE_LABEL : Final[str]
  SPECIFY_PATH_LABEL : Final[str]
  START_CAPTURE : Final[str]
  START_LABEL : Final[str]
  START_LIVE_PLOT : Final[str]
  START_VALUE : Final[str]
  STEP_VALUE : Final[str]
  STOP_LABEL : Final[str]
  STOP_VALUE : Final[str]
  SUBMIT_LABEL : Final[str]
  TEMPERATURE : Final[str]
  THEME : Final[str]
  URMS : Final[str]
  USE_SCRIPTING_INSTEAD : Final[str]
  VERSION_LABEL : Final[str]
  VISUALIZE : Final[str]
  WIPE_LABEL : Final[str]
  WIPE_MODE_LABEL : Final[str]
}
soniccontrol_gui.view.TabView --|> soniccontrol_gui.view.View
soniccontrol_gui.views.configuration.configuration.Configuration --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.views.configuration.configuration.ConfigurationView --|> soniccontrol_gui.view.TabView
soniccontrol_gui.views.configuration.flashing.Flashing --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.views.configuration.flashing.FlashingView --|> soniccontrol_gui.view.TabView
soniccontrol_gui.views.configuration.transducer_configs.ATConfigFrame --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.views.configuration.transducer_configs.ATConfigFrameView --|> soniccontrol_gui.view.View
soniccontrol_gui.views.control.editor.Editor --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.views.control.editor.EditorView --|> soniccontrol_gui.view.TabView
soniccontrol_gui.views.control.logging.Logging --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.views.control.logging.LoggingTab --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.views.control.logging.LoggingTabView --|> soniccontrol_gui.view.TabView
soniccontrol_gui.views.control.logging.LoggingView --|> soniccontrol_gui.view.TabView
soniccontrol_gui.views.control.proc_controlling.ProcControlling --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.views.control.proc_controlling.ProcControllingView --|> soniccontrol_gui.view.TabView
soniccontrol_gui.views.control.serialmonitor.SerialMonitor --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.views.control.serialmonitor.SerialMonitorView --|> soniccontrol_gui.view.TabView
soniccontrol_gui.views.home.Home --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.views.home.HomeView --|> soniccontrol_gui.view.TabView
soniccontrol_gui.views.info.Info --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.views.info.InfoView --|> soniccontrol_gui.view.TabView
soniccontrol_gui.widgets.document.Document --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.widgets.document.DocumentView --|> soniccontrol_gui.view.View
soniccontrol_gui.widgets.file_browse_button.FileBrowseButtonView --|> soniccontrol_gui.view.View
soniccontrol_gui.widgets.procedure_widget.FloatFieldView --|> soniccontrol_gui.view.View
soniccontrol_gui.widgets.procedure_widget.IntFieldView --|> soniccontrol_gui.view.View
soniccontrol_gui.widgets.procedure_widget.ProcedureWidget --|> soniccontrol_gui.ui_component.UIComponent
soniccontrol_gui.widgets.procedure_widget.ProcedureWidgetView --|> soniccontrol_gui.view.View
soniccontrol_gui.widgets.procedure_widget.TimeFieldView --|> soniccontrol_gui.view.View
soniccontrol_gui.state_fetching.csv_writer.CsvWriter --* soniccontrol_gui.state_fetching.capture.Capture : _csv_data_collector
soniccontrol_gui.state_fetching.data_provider.DataProvider --* soniccontrol_gui.state_fetching.capture.Capture : _data_provider
soniccontrol_gui.state_fetching.logger.LogStorage --* soniccontrol_gui.views.control.logging.Logging : _app_logStorage
soniccontrol_gui.state_fetching.logger.LogStorage --* soniccontrol_gui.views.control.logging.Logging : _device_logStorage
soniccontrol_gui.state_fetching.message_fetcher.MessageFetcher --* soniccontrol_gui.views.control.serialmonitor.SerialMonitor : _message_fetcher
soniccontrol_gui.utils.animator.Animator --* soniccontrol_gui.views.control.serialmonitor.SerialMonitor : _animation
soniccontrol_gui.utils.observable_list.ObservableList --* soniccontrol_gui.state_fetching.logger.LogStorage : _logs
soniccontrol_gui.views.configuration.configuration.ConfigurationView --* soniccontrol_gui.views.configuration.configuration.Configuration : _view
soniccontrol_gui.views.configuration.flashing.FlashingView --* soniccontrol_gui.views.configuration.flashing.Flashing : _view
soniccontrol_gui.views.configuration.transducer_configs.ATConfig --* soniccontrol_gui.views.configuration.transducer_configs.ATConfigSchema.Meta : target
soniccontrol_gui.views.configuration.transducer_configs.ATConfigFrameView --* soniccontrol_gui.views.configuration.transducer_configs.ATConfigFrame : _view
soniccontrol_gui.views.configuration.transducer_configs.Config --* soniccontrol_gui.views.configuration.configuration.Configuration : _config
soniccontrol_gui.views.configuration.transducer_configs.Config --* soniccontrol_gui.views.configuration.transducer_configs.ConfigSchema.Meta : target
soniccontrol_gui.views.configuration.transducer_configs.ConfigSchema --* soniccontrol_gui.views.configuration.configuration.Configuration : _config_schema
soniccontrol_gui.views.configuration.transducer_configs.TransducerConfig --* soniccontrol_gui.views.configuration.transducer_configs.TransducerConfigSchema.Meta : target
soniccontrol_gui.views.control.editor.EditorView --* soniccontrol_gui.views.control.editor.Editor : _view
soniccontrol_gui.views.control.editor.ScriptFile --* soniccontrol_gui.views.control.editor.Editor : _script
soniccontrol_gui.views.control.logging.LoggingTab --* soniccontrol_gui.views.control.logging.Logging : _application_log_tab
soniccontrol_gui.views.control.logging.LoggingTab --* soniccontrol_gui.views.control.logging.Logging : _device_log_tab
soniccontrol_gui.views.control.logging.LoggingTabView --* soniccontrol_gui.views.control.logging.LoggingTab : _view
soniccontrol_gui.views.control.logging.LoggingView --* soniccontrol_gui.views.control.logging.Logging : _view
soniccontrol_gui.views.control.proc_controlling.ProcControllingView --* soniccontrol_gui.views.control.proc_controlling.ProcControlling : _view
soniccontrol_gui.views.control.serialmonitor.SerialMonitorView --* soniccontrol_gui.views.control.serialmonitor.SerialMonitor : _view
soniccontrol_gui.views.home.HomeView --* soniccontrol_gui.views.home.Home : _view
soniccontrol_gui.views.info.InfoView --* soniccontrol_gui.views.info.Info : _view
soniccontrol_gui.widgets.document.Document --* soniccontrol_gui.views.info.InfoView : _home_help_frame
soniccontrol_gui.widgets.document.DocumentView --* soniccontrol_gui.widgets.document.Document : _view
soniccontrol_gui.widgets.file_browse_button.FileBrowseButtonView --* soniccontrol_gui.views.configuration.configuration.ConfigurationView : _browse_script_init_button
soniccontrol_gui.widgets.file_browse_button.FileBrowseButtonView --* soniccontrol_gui.views.configuration.flashing.FlashingView : _browse_flash_file_button
soniccontrol_gui.widgets.procedure_widget.ProcedureWidgetView --* soniccontrol_gui.widgets.procedure_widget.ProcedureWidget : _view
soniccontrol_gui.widgets.pushbutton.PushButtonView --* soniccontrol_gui.views.control.editor.EditorView : _start_pause_continue_button
soniccontrol_gui.widgets.pushbutton.PushButtonView --* soniccontrol_gui.views.control.editor.EditorView : _single_step_button
soniccontrol_gui.widgets.pushbutton.PushButtonView --* soniccontrol_gui.views.control.editor.EditorView : _stop_button
soniccontrol_gui.widgets.spinbox.Spinbox --* soniccontrol_gui.views.home.HomeView : _freq_spinbox
soniccontrol_gui.widgets.spinbox.Spinbox --* soniccontrol_gui.views.home.HomeView : _gain_spinbox
soniccontrol_gui.ui_component.UIComponent --o soniccontrol_gui.views.configuration.configuration.ConfigurationView : _presenter
soniccontrol_gui.ui_component.UIComponent --o soniccontrol_gui.views.info.InfoView : _presenter
soniccontrol_gui.utils.observable_list.ObservableList --o soniccontrol_gui.views.control.logging.LoggingTab : _logs
soniccontrol_gui.view.View --o soniccontrol_gui.ui_component.UIComponent : _view
soniccontrol_gui.views.control.editor.InterpreterState --o soniccontrol_gui.views.control.editor.Editor : _interpreter_state
@enduml
