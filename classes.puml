@startuml classes
set namespaceSeparator none
class "AmpBuilder" as soniccontrol.sonicpackage.builder.AmpBuilder {
  build_amp(port: str) -> SonicAmp
}
class "Answer" as soniccontrol.sonicpackage.command.Answer {
  lines
  measured_response
  received
  received_timestamp
  string
  valid
  receive_answer(answer: Union[List[str], Tuple[str], Set[str], str]) -> None
  reset() -> None
}
class "Catch03Updater" as soniccontrol.sonicpackage.sonicamp_.Catch03Updater {
  worker() -> None
}
class "Command" as soniccontrol.sonicpackage.command.Command {
  byte_message
  status_result
  validators
  add_validators(validators: Union[CommandValidator, Iterable[CommandValidator]]) -> None
  execute(argument: Any, connection: Optional[Communicator]) -> object
  set_argument(argument: Any) -> None
  set_serial_communication(serial: Any) -> None
  validate() -> bool
}
class "CommandValidator" as soniccontrol.sonicpackage.command.CommandValidator {
  result
  accepts(data: str) -> bool
  generate_named_pattern(pattern: str, keywords: List[str]) -> str
}
class "Commands" as soniccontrol.sonicpackage.commands.Commands {
  get_atf1
  get_atf2
  get_atf3
  get_att1
  get_info
  get_overview
  get_sens
  get_sens_factorised
  get_sens_fullscale_values
  get_status
  get_type
  set_analog_mode
  set_atf1
  set_atf2
  set_atf3
  set_atk1
  set_atk2
  set_atk3
  set_att1
  set_frequency
  set_gain
  set_khz_mode
  set_mhz_mode
  set_serial_mode
  set_switching_frequency
  signal_auto
  signal_off
  signal_on
}
class "Communicator" as soniccontrol.sonicpackage.interfaces.Communicator {
  connection_opened
  {abstract}connect()
  disconnect() -> None
  {abstract}read_message(timeout: Optional[float]) -> Any
  {abstract}send_and_wait_for_answer(message: Sendable) -> None
}
class "Converter" as soniccontrol.sonicpackage.command.Converter {
  result
  convert() -> Any
}
class "Holder" as soniccontrol.sonicpackage.scripts.Holder {
  duration
  remaining_time
  running
  unit
  execute(duration: float, unit: Literal['ms', 's'], external_event: Optional[asyncio.Event]) -> None
  reset(duration: Optional[float], unit: Literal['ms', 's'], external_event: Optional[asyncio.Event]) -> None
}
class "Info" as soniccontrol.sonicpackage.amp_data.Info {
  update() -> Info
}
class "MeasureUpdater" as soniccontrol.sonicpackage.sonicamp_.MeasureUpdater {
  worker() -> None
}
class "Modules" as soniccontrol.sonicpackage.amp_data.Modules {
  from_string(module_string: str) -> Modules
}
class "OverviewUpdater" as soniccontrol.sonicpackage.sonicamp_.OverviewUpdater {
  worker() -> None
}
class "Ramper" as soniccontrol.sonicpackage.scripts.Ramper {
  current_value
  running
  execute(ramp_values: RampTuple, hold_on: HoldTuple, hold_off: HoldTuple, external_event: Optional[asyncio.Event]) -> None
  ramp() -> None
  reset(ramp_values: RampTuple, hold_on: HoldTuple, hold_off: HoldTuple, external_event: Optional[asyncio.Event]) -> None
}
class "Script" as soniccontrol.sonicpackage.interfaces.Script {
  running
  {abstract}execute() -> None
  stop_execution() -> None
}
class "Scriptable" as soniccontrol.sonicpackage.interfaces.Scriptable {
  updater
  {abstract}execute_command() -> None
  {abstract}set_signal_off() -> None
  {abstract}set_signal_on() -> None
}
class "Sendable" as soniccontrol.sonicpackage.interfaces.Sendable {
  byte_message
}
class "Sequencer" as soniccontrol.sonicpackage.scripts.Sequencer {
  command_changed
  current_command
  current_line
  running
  endloop_response() -> None
  execute(script: Optional[str], external_event: Optional[asyncio.Event]) -> None
  execute_command(line: int) -> None
  reset(script: str, external_event: Optional[asyncio.Event]) -> None
  startloop_response() -> None
}
class "SerialCommunicator" as soniccontrol.sonicpackage.serial_communicator.SerialCommunicator {
  connection_closed
  connection_opened
  init_command
  port
  connect() -> None
  disconnect() -> None
  read_long_message(response_time: float, reading_time: float) -> List[str]
  read_message(response_time: float) -> str
  send_and_wait_for_answer(command: Command) -> None
}
class "SonicAmp" as soniccontrol.sonicpackage.sonicamp_.SonicAmp {
  commands
  frequency_ramper
  holder
  info
  sequencer
  serial
  should_update
  status
  updater
  add_command(message: Union[str, Command], validators: Optional[CommandValitors]) -> None
  add_commands(commands: Iterable[Command]) -> None
  disconnect() -> None
  execute_command(message: Union[str, Command], argument: Any) -> str
  get_atf1() -> str
  get_atf2() -> str
  get_atf3() -> str
  get_att1() -> str
  get_info() -> str
  get_overview() -> str
  get_sens() -> str
  get_status() -> str
  get_type() -> str
  has_command(command: Union[str, Command]) -> bool
  hold(duration: float, unit: Literal['ms', 's'], event: Optional[asyncio.Event]) -> None
  ramp_freq(start: int, stop: int, step: int, hold_on_time: float, hold_on_unit: Literal['ms', 's'], hold_off_time: float, hold_off_unit: Literal['ms', 's'], event: Optional[asyncio.Event]) -> None
  send_message(message: str, argument: Any) -> str
  sequence(script: str) -> None
  set_analog_mode() -> str
  set_atf1(frequency: int) -> str
  set_atf2(frequency: int) -> str
  set_atf3(frequency: int) -> str
  set_atk1(coefficient: float) -> str
  set_atk2(coefficient: float) -> str
  set_atk3(coefficient: float) -> str
  set_att1(temperature: float) -> str
  set_frequency(frequency: int) -> str
  set_gain(gain: int) -> str
  set_relay_mode_khz() -> str
  set_relay_mode_mhz() -> str
  set_serial_mode() -> str
  set_signal_auto() -> str
  set_signal_off() -> str
  set_signal_on() -> str
  set_switching_frequency(frequency: int) -> str
}
class "SonicParser" as soniccontrol.sonicpackage.scripts.SonicParser {
  SUPPORTED_TOKENS : List[str]
  check_syntax_acception(loops, commands, arguments) -> None
  parse_for_loops(commands: list[str], arguments: list[Union[str, int]]) -> tuple[dict[str, int], ...]
  parse_lines(lines: list[str]) -> tuple[Any, ...]
  parse_text(text: str) -> dict[str, Union[tuple[Any, ...], str]]
  values_correctly_converted(arg: Union[int, tuple[Union[int, str], ...]]) -> bool
}
class "Status" as soniccontrol.sonicpackage.amp_data.Status {
  changed
  changed_data
  version
  update() -> Status
}
class "StatusUpdater" as soniccontrol.sonicpackage.sonicamp_.StatusUpdater {
  worker() -> None
}
class "Updater" as soniccontrol.sonicpackage.interfaces.Updater {
  running
  task
  execute() -> None
  stop_execution() -> None
  {abstract}worker() -> None
}
soniccontrol.sonicpackage.command.Command --|> soniccontrol.sonicpackage.interfaces.Sendable
soniccontrol.sonicpackage.scripts.Holder --|> soniccontrol.sonicpackage.interfaces.Script
soniccontrol.sonicpackage.scripts.Ramper --|> soniccontrol.sonicpackage.interfaces.Script
soniccontrol.sonicpackage.scripts.Sequencer --|> soniccontrol.sonicpackage.interfaces.Script
soniccontrol.sonicpackage.serial_communicator.SerialCommunicator --|> soniccontrol.sonicpackage.interfaces.Communicator
soniccontrol.sonicpackage.sonicamp_.Catch03Updater --|> soniccontrol.sonicpackage.interfaces.Updater
soniccontrol.sonicpackage.sonicamp_.MeasureUpdater --|> soniccontrol.sonicpackage.interfaces.Updater
soniccontrol.sonicpackage.sonicamp_.OverviewUpdater --|> soniccontrol.sonicpackage.interfaces.Updater
soniccontrol.sonicpackage.sonicamp_.SonicAmp --|> soniccontrol.sonicpackage.interfaces.Scriptable
soniccontrol.sonicpackage.sonicamp_.StatusUpdater --|> soniccontrol.sonicpackage.interfaces.Updater
soniccontrol.sonicpackage.command.Answer --* soniccontrol.sonicpackage.command.Answer : answer
soniccontrol.sonicpackage.command.CommandValidator --o soniccontrol.sonicpackage.command.CommandValidator : validators
soniccontrol.sonicpackage.serial_communicator.SerialCommunicator --* soniccontrol.sonicpackage.command.Command : _serial_communication
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_frequency
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_gain
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_switching_frequency
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : get_overview
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : get_type
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : get_info
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : get_status
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : get_sens
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : get_sens_factorised
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : get_sens_fullscale_values
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : signal_on
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : signal_off
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : signal_auto
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_serial_mode
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_analog_mode
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_khz_mode
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_mhz_mode
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_atf1
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : get_atf1
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_atk1
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_atf2
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : get_atf2
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_atk2
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_atf3
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : get_atf3
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_atk3
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : set_att1
soniccontrol.sonicpackage.command.Command --* soniccontrol.sonicpackage.commands.Commands : get_att1
soniccontrol.sonicpackage.sonicamp_.MeasureUpdater --* soniccontrol.sonicpackage.sonicamp_.SonicAmp : updater
soniccontrol.sonicpackage.sonicamp_.OverviewUpdater --* soniccontrol.sonicpackage.sonicamp_.SonicAmp : updater
soniccontrol.sonicpackage.sonicamp_.OverviewUpdater --* soniccontrol.sonicpackage.sonicamp_.SonicAmp : updater
soniccontrol.sonicpackage.sonicamp_.StatusUpdater --* soniccontrol.sonicpackage.sonicamp_.SonicAmp : updater
@enduml
