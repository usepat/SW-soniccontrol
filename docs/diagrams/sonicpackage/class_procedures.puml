@startuml class_procedures

set separator . 
top to bottom direction

class "RemoteController" as sonicpackage.remote_controller.RemoteController {
  NOT_CONNECTED : str
  connect_via_process(process_file: Path) -> None
  connect_via_serial(url: Path) -> None
  disconnect() -> None
  execute_procedure(procedure: ProcedureType, args: dict) -> None
  execute_ramp(ramp_args: RamperArgs) -> None
  execute_script(text: str) -> None
  get_attr(attr: str) -> str
  send_command(command_str: str) -> str
  set_attr(attr: str, val: str) -> str
  stop_procedure() -> None
}

class "ProcedureType" as sonicpackage.procedures.procedure_controller.ProcedureType {
  name
}

class "Procedure" as sonicpackage.procedures.procedure.Procedure {
  {abstract}execute(device: Scriptable, args: Any) -> None
  {abstract}get_args_class() -> Type
}

class "ProcedureController" as sonicpackage.procedures.procedure_controller.ProcedureController {
  PROCEDURE_STOPPED : Literal['<<ProcedureStopped>>']
  is_proc_running
  proc_args_list
  running_proc_type
  execute_proc(proc_type: ProcedureType, args: Any) -> None
  stop_proc() -> None
}

class "Ramper" as sonicpackage.procedures.procs.ramper.Ramper {
  get_args_class() -> Type
}

class "RamperArgs" as sonicpackage.procedures.procs.ramper.RamperArgs {
}

class "RamperLocal" as sonicpackage.procedures.procs.ramper.RamperLocal {
  execute(device: Scriptable, args: RamperArgs) -> None
}

class "RamperRemote" as sonicpackage.procedures.procs.ramper.RamperRemote {
  execute(device: Scriptable, args: RamperArgs) -> None
}

class "LegacyScripting" as sonicpackage.scripting.legacy_scripting.LegacyScriptingFacade {
}

class "SonicAmp" as sonicpackage.sonicamp_.SonicAmp {
  commands
  info
  serial
  status
  add_command(message: Union[str, Command], validators: Optional[CommandValitors]) -> None
  add_commands(commands: Iterable[Command]) -> None
  disconnect() -> None
  execute_command(message: Union[str, Command], argument: Any) -> str
  get_remote_proc_finished_event() -> asyncio.Event
  has_command(command: Union[str, Command]) -> bool
  send_message(message: str, argument: Any) -> str
}

sonicpackage.procedures.procedure_controller.ProcedureController -d-|> sonicpackage.events.EventManager
sonicpackage.procedures.procs.ramper.Ramper -d-|> sonicpackage.procedures.procedure.Procedure
sonicpackage.procedures.procs.ramper.RamperLocal -d-|> sonicpackage.procedures.procs.ramper.Ramper
sonicpackage.procedures.procs.ramper.RamperRemote -d-|> sonicpackage.procedures.procs.ramper.Ramper

sonicpackage.procedures.procedure_controller.ProcedureController -r-* sonicpackage.remote_controller.RemoteController : _proc_controller
sonicpackage.procedures.procedure_controller.ProcedureController -d-* sonicpackage.scripting.legacy_scripting.LegacyScriptingFacade : _proc_controller
sonicpackage.procedures.procedure_controller.ProcedureController o-u- sonicpackage.procedures.procedure.Procedure : _procedures
sonicpackage.sonicamp_.SonicAmp -u-o sonicpackage.procedures.procedure_controller.ProcedureController : _device
sonicpackage.sonicamp_.SonicAmp <.u. sonicpackage.procedures.procedure.Procedure

@enduml
