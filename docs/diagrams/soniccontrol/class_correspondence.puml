@startuml class_correspondence

set separator . 
top to bottom direction

class "Answer" as sonic_protocol.python_parser.answer.Answer {
  value_dict
  is_error_msg() -> bool
}

class "AnswerValidator" as sonic_protocol.python_parser.answer.AnswerValidator {
  generate_named_pattern(pattern: str, keywords: List[str]) -> str
  validate(data: str) -> Answer
}


class "CommandDeserializer" as sonic_protocol.python_parser.command_deserializer.CommandDeserializer {
  get_deserialized_command_code(command_str: str) -> CommandCode | None
}

class "CommandSerializer" as sonic_protocol.python_parser.command_serializer.CommandSerializer {
  - lookup_table: Dict[CommandCode, CommandLookUp]
  serialize_command(command: Command) -> str
}

class "Command" as sonic_protocol.python_parser.commands.Command {
  args
  code
}

class "Protocol" as sonic_protocol.defs.Protocol {
}

class "ProtocolBuilder" as sonic_protocol.protocol_builder.ProtocolBuilder {
  build(device_type: DeviceType, version: Version, release: bool) -> CommandLookUpTable
}

class "CommandLookUp" as sonic_protocol.protocol_builder.CommandLookUp {
  + command_def: CommandDef
  + answer_def: AnswerDef
}

class "SonicDevice" as soniccontrol.sonic_device.SonicDevice {
  disconnect() -> None
  execute_command(command: Command | str, should_log: bool, try_deduce_command_if_str: bool) -> Answer
  get_overview() -> Answer
  has_command(command: CommandCode | Command) -> bool
  set_signal_off() -> Answer
  set_signal_on() -> Answer
}

class "Communicator" as soniccontrol.communication.communicator.Communicator {
  DISCONNECTED_EVENT : str
  connection_opened
  handshake_result
  protocol
  reader
  writer
  {abstract}change_baudrate(baudrate: int) -> None
  {abstract}close_communication(restart: bool) -> None
  {abstract}open_communication(connection_factory: ConnectionFactory, baudrate: int)
  {abstract}read_message() -> str
  {abstract}send_and_wait_for_response(request: str) -> str
}

sonic_protocol.protocol_builder.ProtocolBuilder -u-> sonic_protocol.defs.Protocol : _protocol
sonic_protocol.protocol_builder.ProtocolBuilder ..> sonic_protocol.protocol_builder.CommandLookUp
soniccontrol.sonic_device.SonicDevice o-d- soniccontrol.communication.communicator.Communicator : _serial
soniccontrol.sonic_device.SonicDevice o-u- sonic_protocol.python_parser.command_deserializer.CommandDeserializer : command_deserializer
soniccontrol.sonic_device.SonicDevice o-u- sonic_protocol.python_parser.command_serializer.CommandSerializer : command_serializer
soniccontrol.sonic_device.SonicDevice .u.> sonic_protocol.python_parser.answer.AnswerValidator
soniccontrol.sonic_device.SonicDevice -u-> sonic_protocol.protocol_builder.CommandLookUp : lookup_table
sonic_protocol.protocol_builder.CommandLookUp o-- sonic_protocol.python_parser.answer.AnswerValidator : answer_validator
sonic_protocol.python_parser.command_deserializer.CommandDeserializer ..> sonic_protocol.python_parser.commands.Command
sonic_protocol.python_parser.command_serializer.CommandSerializer ..> sonic_protocol.python_parser.commands.Command
sonic_protocol.python_parser.answer.AnswerValidator ..> sonic_protocol.python_parser.answer.Answer
soniccontrol.sonic_device.SonicDevice .u.> sonic_protocol.python_parser.answer.Answer
soniccontrol.sonic_device.SonicDevice .u.> sonic_protocol.python_parser.commands.Command

@enduml