@startuml class_sonic_control

set separator . 
top to bottom direction


class "ScriptingFacade" as soniccontrol.scripting.legacy_scripting.ScriptingFacade {
  lint_text(text: str) -> str
  parse_script(text: str) -> LegacySequencer
}

class "Communicator" as soniccontrol.communication.communicator.Communicator {
  DISCONNECTED_EVENT : str
  connection_opened
  handshake_result
  protocol
  reader
  writer
  {abstract}change_baudrate(baudrate: int) -> None
  {abstract}close_communication(restart: bool) -> None
  {abstract}open_communication(connection_factory: ConnectionFactory, baudrate: int)
  {abstract}read_message() -> str
  {abstract}send_and_wait_for_response(request: str) -> str
}

class "SonicDevice" as soniccontrol.sonic_device.SonicDevice {
  disconnect() -> None
  execute_command(command: Command | str, should_log: bool, try_deduce_command_if_str: bool) -> Answer
  get_overview() -> Answer
  has_command(command: CommandCode | Command) -> bool
  set_signal_off() -> Answer
  set_signal_on() -> Answer
}

class "Updater" as soniccontrol.updater.Updater {
  running
  start() -> None
  stop() -> None
  update() -> None
}

class "ProcedureController" as soniccontrol.procedures.procedure_controller.ProcedureController {
  PROCEDURE_RUNNING : Literal['<<PROCEDURE_RUNNING>>']
  PROCEDURE_STOPPED : Literal['<<PROCEDURE_STOPPED>>']
  is_proc_running
  proc_args_list
  execute_proc(proc_type: ProcedureType, args: Any) -> None
  execute_procedure(procedure: Procedure, proc_type: ProcedureType, args: Any)
  ramp_freq(start: int, stop: int, step: int, hold_on_time: float, hold_on_unit: Literal['ms', 's'], hold_off_time: float, hold_off_unit: Literal['ms', 's']) -> None
  ramp_freq_range(freq_center: int, half_range: int, step: int, hold_on_time: float, hold_on_unit: Literal['ms', 's'], hold_off_time: float, hold_off_unit: Literal['ms', 's']) -> None
  stop_proc() -> None
}

class "RemoteController" as soniccontrol.remote_controller.RemoteController {
  execute_procedure(procedure: ProcedureType, args: dict) -> None
  execute_ramp(ramp_args: RamperArgs) -> None
  send_command(command: str | Command) -> Tuple[str, Dict[EFieldName, Any], bool]
  start_updater()
  stop_procedure() -> None
  stop_updater()
}

class "InterpreterEngine" as soniccontrol.scripting.interpreter_engine.InterpreterEngine {
  INTERPRETATION_ERROR : str
  PROPERTY_CURRENT_TARGET : str
  PROPERTY_INTERPRETER_STATE : str
  interpreter_state
  script
  pause()
  single_step()
  start()
  stop()
}

soniccontrol.sonic_device.SonicDevice o-- soniccontrol.communication.communicator.Communicator : _serial

soniccontrol.updater.Updater --|> soniccontrol.events.EventManager
soniccontrol.sonic_device.SonicDevice --o soniccontrol.updater.Updater : _device

soniccontrol.procedures.procedure_controller.ProcedureController --|> soniccontrol.events.EventManager
soniccontrol.sonic_device.SonicDevice -l-o soniccontrol.procedures.procedure_controller.ProcedureController : _device

soniccontrol.remote_controller.RemoteController o-- soniccontrol.procedures.procedure_controller.ProcedureController
soniccontrol.remote_controller.RemoteController o-- soniccontrol.sonic_device.SonicDevice
soniccontrol.remote_controller.RemoteController o-- soniccontrol.updater.Updater

soniccontrol.scripting.legacy_scripting.ScriptingFacade --* soniccontrol.remote_controller.RemoteController : _scripting
soniccontrol.procedures.procedure_controller.ProcedureController --o soniccontrol.scripting.legacy_scripting.ScriptingFacade : _proc_controller
soniccontrol.sonic_device.SonicDevice --o soniccontrol.scripting.legacy_scripting.ScriptingFacade : _device

soniccontrol.scripting.interpreter_engine.InterpreterEngine --|> soniccontrol.events.EventManager

@enduml
