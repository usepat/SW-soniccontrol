@startuml classes_soniccontrol
set namespaceSeparator none
class "DeviceBuilder" as soniccontrol.builder.DeviceBuilder {
  build_amp(ser: Communicator, commands: Union[CommandSet, CommandSetLegacy], logger: logging.Logger) -> SonicDevice
}
class "Answer" as soniccontrol.command.Answer {
  lines
  measured_response
  received
  received_timestamp
  string
  valid
  receive_answer(answer: Iterable[str] | str) -> None
  reset() -> None
}
class "CLIConnectionFactory" as soniccontrol.communication.connection_factory.CLIConnectionFactory {
  open_connection() -> Tuple[asyncio.StreamReader, asyncio.StreamWriter]
}
class "Command" as soniccontrol.command.Command {
  byte_message
  full_message
  status_result
  validators
  add_validators(validators: Union[CommandValidator, Iterable[CommandValidator]]) -> None
  execute(argument: Any, connection: Optional[Communicator]) -> tuple[Answer, dict[str, Any]]
  get_dict() -> dict
  set_argument(argument: Any) -> None
  validate() -> bool
}
class "CommandSet" as soniccontrol.commands.CommandSet {
  get_atf_values
  get_atk_values
  get_aton_values
  get_att_values
  get_command_list
  get_frequency
  get_gain
  get_info
  get_pzt
  get_status
  get_uipt
  set_atf1
  set_atf2
  set_atf3
  set_atf4
  set_atk1
  set_atk2
  set_atk3
  set_atk4
  set_aton1
  set_aton2
  set_aton3
  set_aton4
  set_att1
  set_att2
  set_att3
  set_att4
  set_frequency
  set_gain
  set_switching_frequency
  signal_off
  signal_on
}
class "CommandSetLegacy" as soniccontrol.commands.CommandSetLegacy {
  get_atf1
  get_atf2
  get_atf3
  get_att1
  get_info
  get_overview
  get_sens
  get_sens_factorised
  get_sens_fullscale_values
  get_status
  get_type
  set_analog_mode
  set_atf1
  set_atf2
  set_atf3
  set_atk1
  set_atk2
  set_atk3
  set_att1
  set_frequency
  set_gain
  set_khz_mode
  set_mhz_mode
  set_serial_mode
  set_switching_frequency
  signal_auto
  signal_off
  signal_on
}
class "CommandValidator" as soniccontrol.command.CommandValidator {
  result
  accepts(data: str) -> bool
  generate_named_pattern(pattern: str, keywords: List[str]) -> str
}
class "CommunicationProtocol" as soniccontrol.communication.sonicprotocol.CommunicationProtocol {
  end_symbol
  major_version
  max_bytes
  start_symbol
  {abstract}parse_request(request: str, request_id: int) -> Any
  {abstract}parse_response(response: str) -> Any
  {abstract}prot_type() -> ProtocolType
}
class "Communicator" as soniccontrol.interfaces.Communicator {
  DISCONNECTED_EVENT : str
  connection_opened
  handshake_result
  protocol
  {abstract}close_communication() -> None
  {abstract}open_communication(connection_factory: ConnectionFactory)
  {abstract}read_message() -> str
  {abstract}send_and_wait_for_answer(message: Sendable) -> None
}
class "CommunicatorBuilder" as soniccontrol.communication.communicator_builder.CommunicatorBuilder {
  build(connection_factory: ConnectionFactory, logger: logging.Logger) -> tuple[Communicator, Union[CommandSet, CommandSetLegacy]]
}
class "ConnectionFactory" as soniccontrol.communication.connection_factory.ConnectionFactory {
  {abstract}open_connection() -> Tuple[asyncio.StreamReader, asyncio.StreamWriter]
}
class "Converter" as soniccontrol.command.Converter {
  result
  convert() -> Any
}
class "DeviceLogLevel" as soniccontrol.communication.sonicprotocol.DeviceLogLevel {
  name
}
class "Event" as soniccontrol.events.Event {
  data
  type_
}
class "EventManager" as soniccontrol.events.EventManager {
  emit(event: Event) -> None
  subscribe(event_type: str, listener: Callable[[Event], None]) -> None
  subscribe_property_listener(property_name: str, listener: Callable[[PropertyChangeEvent], None]) -> None
}
class "FirmwareFlasher" as soniccontrol.interfaces.FirmwareFlasher {
  {abstract}flash_firmware() -> None
}
class "Holder" as soniccontrol.procedures.holder.Holder {
  execute(args: HolderArgs) -> None
}
class "HolderArgs" as soniccontrol.procedures.holder.HolderArgs {
  unit : Literal
}
class "Info" as soniccontrol.device_data.Info {
  firmware_info
  update() -> Info
}
class "LegacyFirmwareFlasher" as soniccontrol.flashing.firmware_flasher.LegacyFirmwareFlasher {
  file_uploaded
  file_validated
  flash_command(test_mode: bool) -> str
  flash_firmware() -> None
  upload_firmware() -> None
  validate_firmware() -> None
}
class "LegacyScriptingFacade" as soniccontrol.scripting.legacy_scripting.LegacyScriptingFacade {
  lint_text(text: str) -> str
  parse_script(text: str) -> LegacySequencer
}
class "LegacySequencer" as soniccontrol.scripting.legacy_scripting.LegacySequencer {
  current_line
  current_task
  is_finished
  endloop_response() -> None
  execute_command(line: int) -> None
  startloop_response() -> None
}
class "LegacySerialCommunicator" as soniccontrol.communication.serial_communicator.LegacySerialCommunicator {
  BAUDRATE : int
  connection_closed
  connection_opened
  handshake_result
  protocol
  close_communication() -> None
  open_communication(connection_factory: ConnectionFactory) -> None
  read_long_message(response_time: float, reading_time: float) -> List[str]
  read_message() -> str
  send_and_wait_for_answer(command: Command) -> None
}
class "LegacySonicProtocol" as soniccontrol.communication.sonicprotocol.LegacySonicProtocol {
  end_symbol
  major_version
  max_bytes
  start_symbol
  parse_request(request: str, request_id: int) -> Any
  parse_response(response: str) -> str
  {abstract}prot_type() -> ProtocolType
}
class "Modules" as soniccontrol.device_data.Modules {
  from_string(module_string: str) -> Modules
}
class "Package" as soniccontrol.communication.package_parser.Package {
  content : str
  destination : str
  identifier : int
  length
  source : str
}
class "PackageFetcher" as soniccontrol.communication.package_fetcher.PackageFetcher {
  is_running
  get_answer_of_package(package_id: int) -> str
  pop_message() -> str
  run() -> None
  stop() -> None
}
class "PackageParser" as soniccontrol.communication.package_parser.PackageParser {
  end_symbol : str
  max_bytes : int
  start_symbol : str
  parse_package(data: str) -> Package
  write_package(package: Package) -> str
}
class "ParsingError" as soniccontrol.scripting.scripting_facade.ParsingError {
}
class "Procedure" as soniccontrol.procedures.procedure.Procedure {
  {abstract}execute(device: Scriptable, args: Any) -> None
  {abstract}get_args_class() -> Type
}
class "ProcedureController" as soniccontrol.procedures.procedure_controller.ProcedureController {
  PROCEDURE_STOPPED : Literal['<<ProcedureStopped>>']
  is_proc_running
  proc_args_list
  running_proc_type
  execute_proc(proc_type: ProcedureType, args: Any) -> None
  ramp_freq(freq_center: int, half_range: int, step: int, hold_on_time: float, hold_on_unit: Literal['ms', 's'], hold_off_time: float, hold_off_unit: Literal['ms', 's']) -> None
  ramp_freq_range(start: int, stop: int, step: int, hold_on_time: float, hold_on_unit: Literal['ms', 's'], hold_off_time: float, hold_off_unit: Literal['ms', 's']) -> None
  stop_proc() -> None
}
class "ProcedureInstantiator" as soniccontrol.procedures.procedure_instantiator.ProcedureInstantiator {
  instantiate_ramp(device: SonicDevice) -> Optional[Ramper]
}
class "ProcedureType" as soniccontrol.procedures.procedure_controller.ProcedureType {
  name
}
class "PropertyChangeEvent" as soniccontrol.events.PropertyChangeEvent {
  PROPERTY_CHANGE_EVENT : Literal['<<PropertyChange>>']
  new_value
  old_value
  property_name
  sender
}
class "ProtocolType" as soniccontrol.communication.sonicprotocol.ProtocolType {
  name
}
class "Ramper" as soniccontrol.procedures.procs.ramper.Ramper {
  get_args_class() -> Type
}
class "RamperArgs" as soniccontrol.procedures.procs.ramper.RamperArgs {
}
class "RamperLocal" as soniccontrol.procedures.procs.ramper.RamperLocal {
  execute(device: Scriptable, args: RamperArgs) -> None
}
class "RamperRemote" as soniccontrol.procedures.procs.ramper.RamperRemote {
  execute(device: Scriptable, args: RamperArgs) -> None
}
class "RemoteController" as soniccontrol.remote_controller.RemoteController {
  NOT_CONNECTED : str
  connect_via_process(process_file: Path) -> None
  connect_via_serial(url: Path) -> None
  disconnect() -> None
  execute_procedure(procedure: ProcedureType, args: dict) -> None
  execute_ramp(ramp_args: RamperArgs) -> None
  execute_script(text: str) -> None
  get_attr(attr: str) -> str
  send_command(command_str: str) -> str
  set_attr(attr: str, val: str) -> str
  stop_procedure() -> None
}
class "Script" as soniccontrol.scripting.scripting_facade.Script {
  current_line
  current_task
  is_finished
}
class "ScriptError" as soniccontrol.scripting.scripting_facade.ScriptError {
}
class "Scriptable" as soniccontrol.interfaces.Scriptable {
  {abstract}execute_command() -> None
  {abstract}get_overview() -> None
  {abstract}get_remote_proc_finished_event() -> asyncio.Event
  {abstract}set_signal_off() -> None
  {abstract}set_signal_on() -> None
}
class "ScriptingFacade" as soniccontrol.scripting.scripting_facade.ScriptingFacade {
  {abstract}lint_text(text: str) -> str
  {abstract}parse_script(text: str) -> Script
}
class "Sendable" as soniccontrol.interfaces.Sendable {
  byte_message
}
class "SerialCommunicator" as soniccontrol.communication.serial_communicator.SerialCommunicator {
  BAUDRATE : int
  connection_opened
  handshake_result
  protocol
  close_communication() -> None
  open_communication(connection_factory: ConnectionFactory, loop) -> None
  read_message() -> str
  send_and_wait_for_answer(command: Command) -> None
}
class "SerialConnectionFactory" as soniccontrol.communication.connection_factory.SerialConnectionFactory {
  open_connection() -> Tuple[asyncio.StreamReader, asyncio.StreamWriter]
}
class "SonicDevice" as soniccontrol.sonic_device.SonicDevice {
  commands
  info
  serial
  status
  add_command(message: Union[str, Command], validators: Optional[CommandValitors]) -> None
  add_commands(commands: Iterable[Command]) -> None
  disconnect() -> None
  execute_command(message: Union[str, Command], argument: Any) -> str
  get_atf(index: int) -> str
  get_att(index: int) -> str
  get_help() -> str
  get_info() -> str
  get_overview() -> str
  get_remote_proc_finished_event() -> asyncio.Event
  get_sens() -> str
  get_status() -> str
  get_type() -> str
  has_command(command: Union[str, Command]) -> bool
  send_message(message: str, argument: Any) -> str
  set_analog_mode() -> str
  set_atf(index: int, frequency: int) -> str
  set_atk(index: int, coefficient: float) -> str
  set_aton(index: int, time_ms: int) -> str
  set_att(index: int, temperature: float) -> str
  set_frequency(frequency: int) -> str
  set_gain(gain: int) -> str
  set_relay_mode_khz() -> str
  set_relay_mode_mhz() -> str
  set_serial_mode() -> str
  set_signal_auto() -> str
  set_signal_off() -> str
  set_signal_on() -> str
  set_switching_frequency(frequency: int) -> str
}
class "SonicParser" as soniccontrol.scripting.legacy_scripting.SonicParser {
  SUPPORTED_TOKENS : List[str]
  check_syntax_acception(loops, commands, arguments) -> None
  parse_for_loops(commands: list[str], arguments: list[Union[str, int]]) -> tuple[dict[str, int], ...]
  parse_lines(lines: list[str]) -> tuple[Any, ...]
  parse_text(text: str) -> dict[str, Union[tuple[Any, ...], str]]
  values_correctly_converted(arg: Union[int, tuple[Union[int, str], ...]]) -> bool
}
class "SonicProtocol" as soniccontrol.communication.sonicprotocol.SonicProtocol {
  LOG_PREFIX : str
  end_symbol
  major_version
  max_bytes
  start_symbol
  parse_request(request: str, request_id: int) -> str
  parse_response(response: str) -> tuple[int, str]
  {abstract}prot_type() -> ProtocolType
}
class "Status" as soniccontrol.device_data.Status {
  changed
  changed_data
  remote_proc_finished_running
  version
  get_dict() -> dict
  update() -> Status
}
soniccontrol.command.Command --|> soniccontrol.interfaces.Sendable
soniccontrol.communication.connection_factory.CLIConnectionFactory --|> soniccontrol.communication.connection_factory.ConnectionFactory
soniccontrol.communication.connection_factory.SerialConnectionFactory --|> soniccontrol.communication.connection_factory.ConnectionFactory
soniccontrol.communication.serial_communicator.LegacySerialCommunicator --|> soniccontrol.interfaces.Communicator
soniccontrol.communication.serial_communicator.SerialCommunicator --|> soniccontrol.interfaces.Communicator
soniccontrol.communication.sonicprotocol.LegacySonicProtocol --|> soniccontrol.communication.sonicprotocol.CommunicationProtocol
soniccontrol.communication.sonicprotocol.SonicProtocol --|> soniccontrol.communication.sonicprotocol.CommunicationProtocol
soniccontrol.events.PropertyChangeEvent --|> soniccontrol.events.Event
soniccontrol.flashing.firmware_flasher.LegacyFirmwareFlasher --|> soniccontrol.interfaces.FirmwareFlasher
soniccontrol.interfaces.Communicator --|> soniccontrol.events.EventManager
soniccontrol.procedures.procedure_controller.ProcedureController --|> soniccontrol.events.EventManager
soniccontrol.procedures.procs.ramper.Ramper --|> soniccontrol.procedures.procedure.Procedure
soniccontrol.procedures.procs.ramper.RamperLocal --|> soniccontrol.procedures.procs.ramper.Ramper
soniccontrol.procedures.procs.ramper.RamperRemote --|> soniccontrol.procedures.procs.ramper.Ramper
soniccontrol.scripting.legacy_scripting.LegacyScriptingFacade --|> soniccontrol.scripting.scripting_facade.ScriptingFacade
soniccontrol.scripting.legacy_scripting.LegacySequencer --|> soniccontrol.scripting.scripting_facade.Script
soniccontrol.sonic_device.SonicDevice --|> soniccontrol.interfaces.Scriptable
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_frequency
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_gain
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_switching_frequency
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : get_info
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : get_command_list
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : get_status
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : signal_on
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : signal_off
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : get_frequency
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : get_gain
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : get_uipt
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : get_pzt
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : get_atf_values
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : get_atk_values
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : get_att_values
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : get_aton_values
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_atf1
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_atf2
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_atf3
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_atf4
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_aton1
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_aton2
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_aton3
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_aton4
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_atk1
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_atk2
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_atk3
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_atk4
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_att1
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_att2
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_att3
soniccontrol.command.Command --* soniccontrol.commands.CommandSet : set_att4
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : get_overview
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : get_type
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : get_info
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_frequency
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_gain
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_switching_frequency
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : get_status
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : get_sens
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : get_sens_factorised
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : get_sens_fullscale_values
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : signal_on
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : signal_off
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : signal_auto
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_serial_mode
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_analog_mode
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_khz_mode
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_mhz_mode
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_atf1
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : get_atf1
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_atk1
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_atf2
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : get_atf2
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_atk2
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_atf3
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : get_atf3
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_atk3
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : set_att1
soniccontrol.command.Command --* soniccontrol.commands.CommandSetLegacy : get_att1
soniccontrol.communication.package_fetcher.PackageFetcher --* soniccontrol.communication.serial_communicator.SerialCommunicator : _package_fetcher
soniccontrol.communication.sonicprotocol.CommunicationProtocol --* soniccontrol.communication.serial_communicator.LegacySerialCommunicator : _protocol
soniccontrol.communication.sonicprotocol.CommunicationProtocol --* soniccontrol.communication.serial_communicator.SerialCommunicator : _protocol
soniccontrol.communication.sonicprotocol.SonicProtocol --* soniccontrol.communication.serial_communicator.SerialCommunicator : _protocol
soniccontrol.procedures.procedure_controller.ProcedureController --* soniccontrol.remote_controller.RemoteController : _proc_controller
soniccontrol.procedures.procedure_controller.ProcedureController --* soniccontrol.scripting.legacy_scripting.LegacyScriptingFacade : _proc_controller
soniccontrol.scripting.legacy_scripting.LegacyScriptingFacade --* soniccontrol.remote_controller.RemoteController : _scripting
soniccontrol.scripting.legacy_scripting.SonicParser --* soniccontrol.scripting.legacy_scripting.LegacyScriptingFacade : _parser
soniccontrol.communication.sonicprotocol.SonicProtocol --o soniccontrol.communication.package_fetcher.PackageFetcher : _protocol
soniccontrol.procedures.procedure_controller.ProcedureType --o soniccontrol.procedures.procedure_controller.ProcedureController : _running_proc_type
soniccontrol.sonic_device.SonicDevice --o soniccontrol.procedures.procedure_controller.ProcedureController : _device
soniccontrol.sonic_device.SonicDevice --o soniccontrol.scripting.legacy_scripting.LegacyScriptingFacade : _device
@enduml
