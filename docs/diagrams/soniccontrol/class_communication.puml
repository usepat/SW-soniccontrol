@startuml class_communication

set separator . 
top to bottom direction


class "CLIConnectionFactory" as soniccontrol.communication.connection_factory.CLIConnectionFactory {
  open_connection() -> Tuple[asyncio.StreamReader, asyncio.StreamWriter]
}


class "CommunicationProtocol" as soniccontrol.communication.message_protocol.CommunicationProtocol {
  major_version
  separator
  {abstract}parse_request(request: str, request_id: int) -> Any
  {abstract}parse_response(response: str) -> Any
  {abstract}prot_type() -> ProtocolType
}
class "Communicator" as soniccontrol.communication.communicator.Communicator {
  DISCONNECTED_EVENT : str
  connection_opened
  handshake_result
  protocol
  reader
  writer
  {abstract}change_baudrate(baudrate: int) -> None
  {abstract}close_communication(restart: bool) -> None
  {abstract}open_communication(connection_factory: ConnectionFactory, baudrate: int)
  {abstract}read_message() -> str
  {abstract}send_and_wait_for_response(request: str) -> str
}
class "CommunicatorBuilder" as soniccontrol.communication.communicator_builder.CommunicatorBuilder {
  build(connection_factory: ConnectionFactory, logger: logging.Logger) -> Communicator
}
class "ConnectionFactory" as soniccontrol.communication.connection_factory.ConnectionFactory {
  {abstract}open_connection() -> Tuple[asyncio.StreamReader, asyncio.StreamWriter]
}

class "LegacyProtocol" as soniccontrol.communication.message_protocol.LegacyProtocol {
  major_version
  separator
  parse_request(request: str, request_id: int) -> Any
  parse_response(response: str) -> str
  {abstract}prot_type() -> ProtocolType
}
class "LegacySerialCommunicator" as soniccontrol.communication.serial_communicator.LegacySerialCommunicator {
  connection_closed
  connection_opened
  handshake_result
  protocol
  reader
  writer
  change_baudrate(baudrate: int) -> None
  close_communication(restart: bool) -> None
  open_communication(connection_factory: ConnectionFactory, baudrate: int) -> None
  read_long_message(response_time: float, reading_time: float) -> str
  read_message() -> str
  send_and_wait_for_response(request: str) -> str
}
class "MessageFetcher" as soniccontrol.communication.message_fetcher.MessageFetcher {
  is_running
  get_answer_of_request(request_id: int) -> str
  pop_message() -> str
  run() -> None
  stop() -> None
}

class "SerialCommunicator" as soniccontrol.communication.serial_communicator.SerialCommunicator {
  MESSAGE_ID_MAX_CLIENT : Final[int]
  connection_opened
  handshake_result
  protocol
  reader
  writer
  change_baudrate(baudrate: int) -> None
  close_communication(restart: bool) -> None
  open_communication(connection_factory: ConnectionFactory, baudrate) -> None
  read_message() -> str
  send_and_wait_for_response(request: str) -> str
}
class "SerialConnectionFactory" as soniccontrol.communication.connection_factory.SerialConnectionFactory {
  open_connection() -> Tuple[asyncio.StreamReader, asyncio.StreamWriter]
}
class "SonicMessageProtocol" as soniccontrol.communication.message_protocol.SonicMessageProtocol {
  ANSWER_PREFIX : str
  COMMAND_PREFIX : str
  LOG_PREFIX : str
  major_version
  separator
  parse_request(request: str, request_id: int) -> str
  parse_response(response: str) -> tuple[int, str | None]
  {abstract}prot_type() -> ProtocolType
}
soniccontrol.communication.connection_factory.CLIConnectionFactory --|> soniccontrol.communication.connection_factory.ConnectionFactory
soniccontrol.communication.connection_factory.SerialConnectionFactory --|> soniccontrol.communication.connection_factory.ConnectionFactory
soniccontrol.communication.message_protocol.LegacyProtocol --|> soniccontrol.communication.message_protocol.CommunicationProtocol
soniccontrol.communication.message_protocol.SonicMessageProtocol --|> soniccontrol.communication.message_protocol.CommunicationProtocol
soniccontrol.communication.serial_communicator.LegacySerialCommunicator --|> soniccontrol.communication.communicator.Communicator
soniccontrol.communication.serial_communicator.SerialCommunicator --|> soniccontrol.communication.communicator.Communicator
soniccontrol.communication.message_fetcher.MessageFetcher --* soniccontrol.communication.serial_communicator.SerialCommunicator : _package_fetcher
soniccontrol.communication.message_protocol.CommunicationProtocol --* soniccontrol.communication.serial_communicator.LegacySerialCommunicator : _protocol
soniccontrol.communication.message_protocol.CommunicationProtocol --* soniccontrol.communication.serial_communicator.SerialCommunicator : _protocol
soniccontrol.communication.message_protocol.SonicMessageProtocol --* soniccontrol.communication.serial_communicator.SerialCommunicator : _protocol
soniccontrol.communication.connection_factory.ConnectionFactory --o soniccontrol.communication.serial_communicator.LegacySerialCommunicator : _connection_factory
soniccontrol.communication.connection_factory.ConnectionFactory --o soniccontrol.communication.serial_communicator.SerialCommunicator : _connection_factory
soniccontrol.communication.message_protocol.SonicMessageProtocol --o soniccontrol.communication.message_fetcher.MessageFetcher : _protocol
soniccontrol.communication.communicator_builder.CommunicatorBuilder .r.> soniccontrol.communication.communicator.Communicator
@enduml
